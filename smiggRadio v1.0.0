@name YT-EGP
@inputs EGP:wirelink
@persist [NP Prefix]:string [Links Playlist Result]:table WL:table
@persist [PLAY SOUND_ID VOLUME CLK Time INDEX PARENT]

if(first() | changed(EGP)){
    Prefix = "!"
    
    SOUND_ID = owner():id()
    VOLUME = 100
    
    Links["convert", string] = "http://www.smiggster.xyz/api/convert.php?youtubelink="
    Links["search", string] = "http://www.smiggster.xyz/api/search.php?max_results=1&q="
    
    streamDisable3D(1)
    streamRadius(SOUND_ID, 120)
    
    entity():createWire(entity():isWeldedTo(), "EGP", "wirelink")
    function loadegp(){
        # Format: array(Index, Position, Scale, Color, [Optional: Parent])
        function crbox(ARR:array){
            EGP:egpBox(ARR[1, number], ARR[2, vector2], ARR[3, vector2])
            EGP:egpColor(ARR[1, number], ARR[4, vector])
            
            if(ARR[5, number] != 0){ EGP:egpParent(ARR[1, number], ARR[5, number]) }
        }
        function crboxout(Index, Pos:vector2, Size:vector2, Color:vector){
            EGP:egpBoxOutline(Index, Pos, Size)
            EGP:egpColor(Index, Color)
        }
        function crtext(R:array){
            EGP:egpText(R[1, number], R[2, string], R[3, vector2])
            EGP:egpSize(R[1, number], R[4, number])
            EGP:egpAlign(R[1, number], 1, 1)
            
            if(R[5, number] != 0){ EGP:egpParent(R[1, number], R[5, number]) }
        }
        EGP:egpClear()
        
        # ---// Background \\---
        crbox(array(1, vec2(256, 256), vec2(512, 512), vec(25, 25, 35)))
        
        # ---// Currently Playing Box \\---
        crbox(array(2, vec2(256, 45), vec2(412, 45), vec(35, 35, 55)))
    
        # ---// Result Bounding Box \\---
        crbox(array(3, vec2(256, 265), vec2(412, 375), vec(35, 35, 55)))
        
        # ---// Result Boxes \\---
        crbox(array(4, vec2(0, -175), vec2(412, 25), vec(25, 25, 45), 3))      
        crbox(array(5, vec2(0, -150), vec2(412, 25), vec(35, 35, 55), 3))        
        crbox(array(6,  vec2(0, -125), vec2(412, 25), vec(25, 25, 45), 3))        
        crbox(array(7, vec2(0, -100), vec2(412, 25), vec(35, 35, 55), 3))        
        crbox(array(8,  vec2(0, -75), vec2(412, 25), vec(25, 25, 45), 3))        
        crbox(array(9, vec2(0, -50), vec2(412, 25), vec(35, 35, 55), 3))
        crbox(array(10, vec2(0, -25), vec2(412, 25), vec(25, 25, 45), 3))        
        crbox(array(11, vec2(0, 0), vec2(412, 25), vec(35, 35, 55), 3))        
        crbox(array(12, vec2(0, 25), vec2(412, 25), vec(25, 25, 45), 3))
        crbox(array(13, vec2(0, 50), vec2(412, 25), vec(35, 35, 55), 3)) 
        crbox(array(14, vec2(0, 75), vec2(412, 25), vec(25, 25, 45), 3))     
        crbox(array(15, vec2(0, 100), vec2(412, 25), vec(35, 35, 55), 3)) 
        crbox(array(16, vec2(0, 125), vec2(412, 25), vec(25, 25, 45), 3))     
        crbox(array(17, vec2(0, 150), vec2(412, 25), vec(35, 35, 55), 3))
        crbox(array(18, vec2(0, 175), vec2(412, 25), vec(25, 25, 45), 3))
        
        # ---// Result Bounding Box Outline \\---
        crboxout(19, vec2(256, 265), vec2(412, 375), vec(45, 45, 65))
        
        # ---// Currently Playing Box Outline \\---
        crboxout(20, vec2(256, 45), vec2(412, 45), vec(45, 45, 65))
        
        # ---// Currently Playing Box Text \\---
        EGP:egpText(21, "", vec2(0, 0))
        EGP:egpSize(21, 14)
        EGP:egpAlign(21, 1, 1)
        EGP:egpParent(21, 2)
        
        # ---// Cheeky watermark at the bottom \\---
        crtext(array(22, "smiggRadio v1.5.2", vec2(256, 490), 20))
        
        # ---// Request Status \\---
        crbox(array(23, vec2(55, 505), vec2(150, 20), vec(25, 25, 35)))
        crtext(array(24, "", vec2(0, 0), 15, 23))
    }
    loadegp()  

    function fancychat(ERR, MSG:string){
        local COL = !ERR ? vec(255, 0, 0) : vec(0, 255, 0)
        printColor(COL, "| ", vec(255), MSG)
    }

    function printcmds(){
        local CMDS = array(
            "play <request>",
            "skip",
            "queue",
            "vol <number>",
            "help",
            "add <player>",
            "remove <player>",
            "whitelist"
        )
        for(I = 1, CMDS:count()){
            fancychat(1, Prefix + CMDS[I, string])
        }  
    }
    fancychat(1, format("Type %shelp to see a list of commands", Prefix))

    WL[owner():steamID(), entity] = owner()
    WL[findPlayerByName("Addy"):steamID(), entity] = findPlayerByName("Addy")
    
    runOnChat(1)
    runOnHTTP(1)
}

foreach(K, Ply:entity = WL){
    if(chatClk(Ply) & lastSaid():sub(1, 1) == Prefix){
        hideChat(1)
        
        ARGS = lastSaid():replace("!", "")
        S = ARGS:explode(" ")
        switch(S[1, string]){
            case "play", 
                local ERR = httpCanRequest() ? "Requesting 1 | 2" : "Couldn't Request 1 | 2"
                fancychat(httpCanRequest(), ERR)
                
                EGP:egpSetText(24, ERR)
                
                if(httpCanRequest()){
                    local REQ = Links["search", string] + httpUrlEncode(ARGS:sub(6, ARGS:length()))
                    Links["stage1", string] = REQ
                    httpRequest(REQ)
                }
            break
            case "skip", 
                fancychat(1, "Skipped")
                PLAY = 0
                timer("play", 10)
                timer("clk", 1000)
            break
            case "queue", 
                if(Playlist:count() > 0){
                    for(I = 1, Playlist:count()){ fancychat(1, format("%s: %s", I, Playlist[I, array][1, string])) }
                }else{ fancychat(0, "Playlist Empty") }
            break
            case "vol", 
                if(S[2, string] != ""){
                    VOLUME = clamp(S[2, string]:toNumber(), 0, 100) / 100
                    streamVolume(SOUND_ID, VOLUME)
                    
                    fancychat(1, format("Volume set to %s%%", VOLUME * 100))
                }else{ fancychat(1, format("Volume is %s%%", VOLUME * 100)) }
            break
            case "help",
                printcmds()
            break
            case "add", 
                if(Ply == owner()){
                    local FIND = findPlayerByName(S[2, string])
                    if(FIND:isPlayer()){
                        if(!WL[FIND:steamID(), entity]:isValid()){
                            WL[FIND:steamID(), entity] = FIND
                            fancychat(1, format("Added %s to the Whitelist", FIND:name()))
                        }
                        elseif(WL[FIND:steamID(), entity]:isPlayer()){
                            fancychat(0, "This player is already in the Whitelist")
                        }
                    }
                    elseif(!FIND:isPlayer()){
                        fancychat(0, format("Couldn't find a player with the identifier \"%s\"", S[2, string]))    
                    }
                }
            break
            case "remove",
                if(Ply == owner()){
                    local FIND = findPlayerByName(S[2, string])
                    if(FIND != owner()){
                        if(FIND:isPlayer()){
                            if(WL[FIND:steamID(), entity]:isPlayer()){
                                WL:remove(FIND:steamID())
                                fancychat(1, format("Removed %s from the Whitelist", FIND:name()))
                            }
                            elseif(WL[FIND:steamID(), entity] != FIND){
                                fancychat(0, "This player isn't in the Whitelist")
                            }
                        }
                        elseif(!FIND:isPlayer()){
                            fancychat(0, format("Couldn't find a player with the identifier \"%s\"", S[2, string]))     
                        }
                    }
                    else{
                        fancychat(0, "You can't remove yourself from the Whitelist")
                    }
                }
            break
            case "whitelist",
                local I = 1
                foreach(K, V:entity = WL){
                    fancychat(1, format("%s: %s (%s)", I, V:name(), K))
                    I++
                }
            break
        }
    }
}

if(httpClk()){
    switch(httpRequestUrl()){
        case Links["stage1", string],
            Result = jsonDecode(httpData())
            timer("delay", 3000)
        break
        case Links["stage2", string],
            local DATA = jsonDecode(httpData())
            
            local ARR = array(DATA["title", string], DATA["duration", number], DATA["file", string])
            Playlist:pushArray(ARR)
            
            fancychat(1, format("Added: %s", DATA["title", string]))
            
            timer("updatelist", 100)
            timer("clk", 1000)
        break
    }
}

if(clk("delay")){
    local ERR = httpCanRequest() ? "Requesting 2 | 2" : "Couldn't Request 2 | 2"
    fancychat(httpCanRequest(), ERR)
    
    EGP:egpSetText(24, ERR)
    
    if(httpCanRequest()){
        local REQ = Links["convert", string] + Result["results", table][1, table]["full_link", string]
        Links["stage2", string] = REQ
        httpRequest(REQ)   
    }
}

if(!PLAY & clk("clk") & Playlist:count() >= 0){
    timer("play", 1)
    PLAY = 1
}

if(clk("play")){
    if(PLAY){
        timer("StopFromDuration", 1000)
        Time = Playlist[1, array][2, number]
        
        NP = Playlist[1, array][1, string]
        if(NP:length() >= 45){
            NP = Playlist[1, array][1, string]:sub(1, 45) + "..."
        }
        else{
            NP = Playlist[1, array][1, string]
        }
        EGP:egpSetText(21, NP)
        
        if(streamCanStart()){
            entity():streamStart(SOUND_ID,Playlist[1, array][3, string])
            streamVolume(SOUND_ID, VOLUME / 100)
        }
        else{ fancychat(0, "Couldn't start stream") }

        Playlist:shift()
        
        timer("updatelist", 10)
    }
    else{ streamStop(SOUND_ID) }
    stoptimer("play")
}

if(clk("StopFromDuration")){
    if(CLK <= Time & PLAY){
        CLK++
        EGP:egpSetText(21, format("%s (%s | %s)", NP, clamp(CLK, 0, Time), Time))
    }
    else{
        PLAY = 0
        timer("clk", 1000)
        EGP:egpSetText(21, "")
        stoptimer("StopFromDuration")
        CLK = 0
    }
    timer("StopFromDuration", 1000)
}

if(clk("updatelist")){
    EGP:egpClear()
    loadegp()
    INDEX = 25
    PARENT = 4
    for(I = 1, Playlist:count()){
        local TEXT = Playlist[I, array][1, string]
        if(TEXT:length() >= 45){
            TEXT = Playlist[I, array][1, string]:sub(1, 45) + "..."
        }
        else{
            TEXT = Playlist[I, array][1, string]
        }
        
        EGP:egpText(INDEX, TEXT, vec2(0,0))
        EGP:egpAlign(INDEX, 1, 1)
        EGP:egpParent(INDEX, PARENT)
        
        INDEX++
        PARENT++
    }
    stoptimer("updatelist") 
}
